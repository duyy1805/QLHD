const express = require('express')
const router = express.Router()
const argon2 = require('argon2')
const jwt = require('jsonwebtoken')
const { verifyToken, verifyAdmin } = require('../middleware/auth');
const { poolPromise } = require('../db');
const sql = require('mssql');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// üìÅ C·∫•u h√¨nh th∆∞ m·ª•c l∆∞u file
const uploadDir = 'C:/VanBanDi/Upload';
// üõ†Ô∏è T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}
// üì¶ C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u file PDF
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueName = Date.now() + '-' + file.originalname;
        cb(null, uniqueName);
    },
});
const upload = multer({ storage });

router.post('/vanbandi', async (req, res) => {
    try {
        const { SoVanBan, TenCoQuan } = req.body;

        const pool = await poolPromise;
        const result = await pool.request()
            .input('SoVanBan', sql.NVarChar(50), SoVanBan || null)
            .input('TenCoQuan', sql.NVarChar(255), TenCoQuan || null)
            .execute('HD_VanBanDi_Get');

        res.json(result.recordset);
    } catch (err) {
        console.error(err);
        res.status(500).send('C√≥ l·ªói x·∫£y ra khi truy v·∫•n c∆° s·ªü d·ªØ li·ªáu.');
    }
});
router.get('/lookup-vanbandi', async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().execute('HD_GetLookUpVBD');

        res.json({
            loaiVanBan: result.recordsets[0],
            coQuan: result.recordsets[1],
            nguoiKy: result.recordsets[2],
        });
    } catch (err) {
        console.error('L·ªói khi l·∫•y lookup vƒÉn b·∫£n ƒëi:', err);
        res.status(500).send('L·ªói khi l·∫•y d·ªØ li·ªáu lookup vƒÉn b·∫£n ƒëi.');
    }
});


// ‚úÖ API th√™m vƒÉn b·∫£n ƒëi
router.post('/them-vanbandi', upload.single('file'), async (req, res) => {
    try {
        const {
            TenVanBan, NgayVanBan, NguoiKyId,
            NoiNhanId, LoaiVanBanId,
            SoLuongBan, NgayChuyen, GhiChu, CreatedBy
        } = req.body;

        const file = req.file;

        const pool = await poolPromise;
        const result = await pool.request()
            .input('TenVanBan', sql.NVarChar(255), TenVanBan)
            .input('NgayVanBan', sql.Date, NgayVanBan)
            .input('NguoiKyId', sql.Int, NguoiKyId)
            .input('NoiNhanId', sql.Int, NoiNhanId)
            .input('LoaiVanBanDiId', sql.Int, LoaiVanBanId)
            .input('SoLuongBan', sql.Int, SoLuongBan)
            .input('NgayChuyen', sql.Date, NgayChuyen)
            .input('GhiChu', sql.NVarChar(sql.MAX), GhiChu)
            .input('CreatedBy', sql.Int, CreatedBy)
            .output('SoVanBan', sql.NVarChar(50))
            .execute('HD_VanBanDi_Add');

        const soVanBan = result.output.SoVanBan;
        const newRecord = result.recordset?.[0];
        let finalPath = null;

        if (file && soVanBan) {
            const newFileName = soVanBan.replace(/\//g, '-') + '.pdf'; // Ex: 001-BC-CNTT.pdf
            const finalFilePath = path.join(uploadDir, newFileName);
            fs.renameSync(file.path, finalFilePath);

            finalPath = finalFilePath.replace(/\\/g, '/');

            // C·∫≠p nh·∫≠t l·∫°i FilePath sau khi rename
            await pool.request()
                .input('SoVanBan', sql.NVarChar(50), soVanBan)
                .input('FilePath', sql.NVarChar(500), finalPath)
                .query(`
                    UPDATE HD_VanBanDi
                    SET FilePath = @FilePath
                    WHERE SoVanBan = @SoVanBan
                `);
        }

        res.json({
            success: true,
            message: 'Th√™m vƒÉn b·∫£n ƒëi th√†nh c√¥ng.',
            soVanBan,
            filePath: finalPath,
            data: newRecord
        });

    } catch (err) {
        console.error('‚ùå L·ªói khi th√™m vƒÉn b·∫£n ƒëi:', err);
        res.status(500).json({ success: false, message: 'L·ªói khi th√™m vƒÉn b·∫£n ƒëi.' });
    }
});

router.put('/sua-vanbandi', upload.single('file'), async (req, res) => {
    try {
        const {
            Id,
            TenVanBan,
            NgayVanBan,
            NguoiKyId,
            NoiNhanId,
            LoaiVanBanId,
            SoLuongBan,
            NgayChuyen,
            GhiChu,
            UpdatedBy
        } = req.body;

        const file = req.file;
        const pool = await poolPromise;

        // üîç L·∫•y th√¥ng tin hi·ªán t·∫°i c·ªßa vƒÉn b·∫£n
        const oldData = await pool.request()
            .input('Id', sql.Int, Id)
            .query(`
                SELECT SoVanBan, FilePath
                FROM HD_VanBanDi
                WHERE Id = @Id
            `);

        if (!oldData.recordset.length) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n.' });
        }

        const { SoVanBan, FilePath: oldFilePath } = oldData.recordset[0];
        let finalPath = oldFilePath;

        // üìÇ N·∫øu c√≥ file m·ªõi: ƒë·ªïi t√™n v√† ghi ƒë√®
        if (file && SoVanBan) {
            const newFileName = SoVanBan.replace(/\//g, '-') + '.pdf';
            const finalFilePath = path.join(uploadDir, newFileName);

            // ‚ùå Xo√° file c≈© n·∫øu t·ªìn t·∫°i
            if (oldFilePath && fs.existsSync(oldFilePath)) {
                fs.unlinkSync(oldFilePath);
            }

            // üì• Ghi file m·ªõi
            fs.renameSync(file.path, finalFilePath);
            finalPath = finalFilePath.replace(/\\/g, '/');
        }

        // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin vƒÉn b·∫£n ƒëi
        await pool.request()
            .input('Id', sql.Int, Id)
            .input('TenVanBan', sql.NVarChar(255), TenVanBan)
            .input('NgayVanBan', sql.Date, NgayVanBan)
            .input('NguoiKyId', sql.Int, NguoiKyId)
            .input('NoiNhanId', sql.Int, NoiNhanId)
            .input('LoaiVanBanDiId', sql.Int, LoaiVanBanId)
            .input('SoLuongBan', sql.Int, SoLuongBan)
            .input('NgayChuyen', sql.Date, NgayChuyen)
            .input('GhiChu', sql.NVarChar(sql.MAX), GhiChu)
            .input('FilePath', sql.NVarChar(500), finalPath)
            .input('UpdatedBy', sql.Int, UpdatedBy)
            .query(`
                UPDATE HD_VanBanDi
                SET
                    TenVanBan = @TenVanBan,
                    NgayVanBan = @NgayVanBan,
                    NguoiKyId = @NguoiKyId,
                    NoiNhanId = @NoiNhanId,
                    LoaiVanBanDiId = @LoaiVanBanDiId,
                    SoLuongBan = @SoLuongBan,
                    NgayChuyen = @NgayChuyen,
                    GhiChu = @GhiChu,
                    FilePath = @FilePath,
                    UpdatedAt = GETDATE(),
                    UpdatedBy = @UpdatedBy
                WHERE Id = @Id
            `);

        res.json({
            success: true,
            message: 'C·∫≠p nh·∫≠t vƒÉn b·∫£n ƒëi th√†nh c√¥ng.',
            filePath: finalPath
        });

    } catch (err) {
        console.error('‚ùå L·ªói khi s·ª≠a vƒÉn b·∫£n ƒëi:', err);
        res.status(500).json({ success: false, message: 'L·ªói khi s·ª≠a vƒÉn b·∫£n ƒëi.' });
    }
});

module.exports = router;